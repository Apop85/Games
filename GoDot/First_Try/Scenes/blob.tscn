[gd_scene load_steps=12 format=2]

[ext_resource path="res://assets/blob/blob_walk_2.png" type="Texture" id=1]
[ext_resource path="res://assets/blob/blob_walk_0.png" type="Texture" id=2]
[ext_resource path="res://assets/blob/blob_walk_3.png" type="Texture" id=3]
[ext_resource path="res://assets/blob/blob_walk_1.png" type="Texture" id=4]
[ext_resource path="res://assets/blob/blob_die_1.png" type="Texture" id=5]
[ext_resource path="res://assets/blob/blob_die_0.png" type="Texture" id=6]
[ext_resource path="res://assets/blob/blob_die_2.png" type="Texture" id=7]
[ext_resource path="res://assets/blob/blob_jump_0.png" type="Texture" id=8]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

const GRAVITY = 400
const SPEED = 10
const JUMP_POWER = 100
const UP_VECTOR = Vector2(0,-1)

# Get sprite and ray casts
onready var sprite = $AnimatedSprite
onready var rayL = $RayCastL
onready var rayLD = $RayCastLD
onready var rayL2 = $RayCastL2
onready var rayR = $RayCastR
onready var rayRD = $RayCastRD
onready var rayR2 = $RayCastR2
onready var rayTR = $RayCastTR
onready var rayTL = $RayCastTL

var movement = Vector2(SPEED, 0)
var jumpX = 0
var is_alive = true
var direction = 1


func _ready():
	sprite.play(\"walk\")

func _physics_process(delta):
	if not is_alive:
		return
#	set default gravity
	movement.y += GRAVITY * delta
	
	# Gravity calculation
#	If collision with floor
	if is_on_floor():
#		If animation name is \"jump\"
		if sprite.animation == \"jump\":
#			Play landing animation
			on_landing()
		else:
#			Disable gravity
			movement.y = 0
			
#			If collision with wall and top of the wall is reachable
			if is_on_wall() and jump_possible():
				jump()
				
#			If over an abyss and the bottom is just one tile away
			elif is_over_abyss() and is_stair():
				pass
			
#			If over an abyss and opposite site is reachable
			elif is_over_abyss() and overcome_abyss():
				jump()
			
#			If collision with wall and over an abyss which can't be jumped over
			elif is_on_wall() or is_over_abyss():
				turn()

#	Check for collisions
	move_and_slide_with_snap(movement, Vector2(0,1), UP_VECTOR)


func on_stomp():
#	Play die animation
	sprite.play(\"die\")
#	Set enemy to dead
	is_alive = false


func is_over_abyss():
#	Update rays
	rayL.force_raycast_update()
	rayR.force_raycast_update()
#	Depending on direction check collisions
	if direction == 1:
		return rayR.get_collider() == null
	else:
		return rayL.get_collider() == null

func is_stair():
#	Update rays
	rayLD.force_raycast_update()
	rayRD.force_raycast_update()
#	Depending on direction check collisions
	if direction == 1:
		return rayRD.get_collider() != null
	else:
		return rayLD.get_collider() != null

func overcome_abyss():
	#	Update rays
	rayL2.force_raycast_update()
	rayR2.force_raycast_update()
#	Depending on direction check collisions
	if direction == 1:
		return rayR2.get_collider() != null
	else:
		return rayL2.get_collider() != null


func jump_possible():
	#	Update rays
	rayTR.force_raycast_update()
	rayTL.force_raycast_update()
#	Depending on direction check collisions
	if direction == 1:
		return rayTR.get_collider() == null
	else:
		return rayTL.get_collider() == null

func jump():
#	Play jump animation
	sprite.play(\"jump\")
#	Flip jump animation
	sprite.flip_h = not sprite.flip_h
#	Increase speed while jumping
	movement.x = SPEED * direction * 4
	movement.y = -JUMP_POWER
#	Save position
	jumpX = floor(position.x)
	
	
func on_landing():
#	Play walk animation 
	sprite.play(\"walk\")
#	Flip animation
	sprite.flip_h = not sprite.flip_h
#	Reset speed
	movement.x = SPEED * direction
#	Reset gravity
	movement.y = 0
#	Turn if landing point == starting point
	if floor(position.x) == jumpX:
		turn()
		

func turn():
#	Reverse x axis speed
	direction *= -1
	movement.x = SPEED * direction
#	Flip sprite
	sprite.flip_h = not sprite.flip_h


func _on_die_animation_finished():
	if sprite.animation == \"die\":
#		Delete enemy from game
		queue_free()
	
"

[sub_resource type="SpriteFrames" id=2]
animations = [ {
"frames": [ ExtResource( 8 ) ],
"loop": true,
"name": "jump",
"speed": 5.0
}, {
"frames": [ ExtResource( 2 ), ExtResource( 4 ), ExtResource( 1 ), ExtResource( 3 ) ],
"loop": true,
"name": "walk",
"speed": 5.0
}, {
"frames": [ ExtResource( 6 ), ExtResource( 5 ), ExtResource( 7 ) ],
"loop": false,
"name": "die",
"speed": 15.0
} ]

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 6.95841, 2.26075 )

[node name="Blob" type="KinematicBody2D"]
script = SubResource( 1 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
position = Vector2( 0, -8 )
frames = SubResource( 2 )
animation = "jump"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0.649647, -2.28891 )
shape = SubResource( 3 )

[node name="RayCastL" type="RayCast2D" parent="."]
position = Vector2( -6.28187, -0.558834 )
cast_to = Vector2( 0, 1 )

[node name="RayCastLD" type="RayCast2D" parent="."]
position = Vector2( -8.28187, -0.558834 )
cast_to = Vector2( 0, 13 )

[node name="RayCastL2" type="RayCast2D" parent="."]
position = Vector2( -25.2819, -0.558834 )
cast_to = Vector2( 0, 1 )

[node name="RayCastR" type="RayCast2D" parent="."]
position = Vector2( 7.55897, -0.562823 )
cast_to = Vector2( 0, 1 )

[node name="RayCastRD" type="RayCast2D" parent="."]
position = Vector2( 9.55897, -0.562823 )
cast_to = Vector2( 0, 13 )

[node name="RayCastR2" type="RayCast2D" parent="."]
position = Vector2( 26.559, -0.562823 )
cast_to = Vector2( 0, 1 )

[node name="RayCastTR" type="RayCast2D" parent="."]
position = Vector2( 6.80204, -12.8336 )
cast_to = Vector2( 3, 0 )

[node name="RayCastTL" type="RayCast2D" parent="."]
position = Vector2( -5.23246, -12.8244 )
cast_to = Vector2( -3, 0 )
[connection signal="animation_finished" from="AnimatedSprite" to="." method="_on_die_animation_finished"]
